To create a Laravel file upload functionality, you need to follow these steps:


Set Up Laravel Project: If you haven't already, install Laravel using Composer:
composer create-project --prefer-dist laravel/laravel file-upload
cd file-upload
Create a Controller: Generate a controller to handle file upload functionality:
php artisan make:controller FileUploadController
Define Routes: Define routes in the routes/web.php file to handle file upload requests:
use App\Http\Controllers\FileUploadController;
Route::get('/upload', [FileUploadController::class, 'showUploadForm']);
Route::post('/upload', [FileUploadController::class, 'upload']);
Create View: Create a view file where users can upload files. For example, create a file named upload.blade.php in the resources/views directory:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload</title>
</head>
<body>
    <form action="/upload" method="post" enctype="multipart/form-data">
        @csrf
        <input type="file" name="file">
        <button type="submit">Upload File</button>
    </form>
</body>
</html>
Implement Controller: Implement the controller methods to handle file upload requests:
<?php


namespace App\Http\Controllers;


use Illuminate\Http\Request;


class FileUploadController extends Controller
{
    public function showUploadForm()
    {
        return view('upload');
    }


    public function upload(Request $request)
    {
        $request->validate([
            'file' => 'required|mimes:jpg,png,jpeg|max:2048',
        ]);


        if ($request->file('file')->isValid()) {
            $file = $request->file('file');
            $fileName = time() . '_' . $file->getClientOriginalName();
            $file->move(public_path('uploads'), $fileName);


            return redirect('/upload')->with('success', 'File uploaded successfully.');
        } else {
            return redirect('/upload')->with('error', 'Invalid file.');
        }
    }
}
Configure Storage: Ensure that the public/uploads directory exists in your project. If not, create it. This is where the uploaded files will be stored.


Run the Application: Run the Laravel application using the built-in server:


php artisan serve
Users can now access the file upload form at http://localhost:8000/upload and upload files. The uploaded files will be stored in the public/uploads directory. Make sure to adjust file validation rules and error/success messages as needed.




Troubleshoot if required
Check URL: Double-check the URL you're using to access the upload page. It should be http://localhost:8000/upload if you're running the application using php artisan serve.
Run php artisan route:list: Execute the php artisan route:list command in your terminal to list all registered routes. Verify that the /upload route is listed and properly registered.
Clear Route Cache: If you've made changes to your routes, clear the route cache using the php artisan route:clear command to ensure that Laravel picks up the changes.
Check Web Server Configuration: If you're not using the built-in Laravel server (php artisan serve) and encountering the error on a production server, ensure that your web server (e.g., Apache, Nginx) is properly configured to serve Laravel applications.